plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id("org.jetbrains.kotlin.plugin.parcelize")
    id 'androidx.navigation.safeargs'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def keystorePropertiesFile = rootProject.file("Jachai_keyStore/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def appPropertiesFile = rootProject.file("app-settings.properties")
def appProperties = new Properties()
appProperties.load(new FileInputStream(appPropertiesFile))
def envProperties
android {
    signingConfigs {
        JachaiSigningConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion = appProperties['sdk.version.compile'] as int

    defaultConfig {
        applicationId "com.jachai.jachaimart"
        minSdkVersion appProperties['sdk.version.min'] as int
        targetSdkVersion appProperties['sdk.version.target'] as int
        multiDexEnabled true
        versionCode appProperties['app.version.code'] as int
        versionName appProperties['app.version.name']
        vectorDrawables.useSupportLibrary = true

        def buildVariant = getBuildVariant()
        def environmentPath
        if ((buildVariant == "Release") || (buildVariant == "DebugLive")) {
            environmentPath = appProperties["env.path.live"]
        } else if ((buildVariant == "ReleaseTest") || (buildVariant == "Debug")) {
            environmentPath = appProperties["env.path.test"]
        } else {
            environmentPath = appProperties["env.path.live"]
        }

        def envPropertiesFile = rootProject.file(environmentPath)
        envProperties = new Properties()
        envProperties.load(new FileInputStream(envPropertiesFile))
        println("buildVariant = $buildVariant")
        for (String key : envProperties.keySet()) {
            buildConfigField "String", key.replaceAll("\\.", "_").toUpperCase(), "\"" + envProperties[key] + "\""

        }

    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.JachaiSigningConfig
            manifestPlaceholders = [appNameJachai: "@string/app_name_debug_test"]
        }
        debugLive {
            debuggable true
            applicationIdSuffix ".debug.live"
            signingConfig signingConfigs.JachaiSigningConfig
            manifestPlaceholders = [appNameJachai: "@string/app_name_debug_Live"]
        }
        releaseTest {
            debuggable true
            manifestPlaceholders = [appNameJachai: "@string/app_name_test"]
            applicationIdSuffix ".release.test"
            minifyEnabled false
            signingConfig signingConfigs.JachaiSigningConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            manifestPlaceholders = [appNameJachai: "@string/app_name_live"]
            minifyEnabled false
            signingConfig signingConfigs.JachaiSigningConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    configurations.all {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

def getBuildVariant() {
    for (TaskExecutionRequest t : gradle.getStartParameter().getTaskRequests()) {
        for (String command : t.args) {
            if (command.matches(":app:generate(.*)Sources")) {
                return command.replaceAll(":app:generate(.*)Sources", "\$1")
            } else if (command.matches(":app:assemble(.*)")) {
                return command.replaceAll(":app:assemble(.*)", "\$1")
            }
        }
    }
    return "Release"
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.gms:play-services-auth:19.2.0'
    implementation 'androidx.compose.foundation:foundation:1.0.0-beta04'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'



    //Retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    //OkHttp3
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'

    //Scarlet library
    implementation 'com.tinder.scarlet:scarlet:0.1.12'

    //Scarlet helpers
    implementation 'com.tinder.scarlet:message-adapter-gson:0.1.12'
    implementation 'com.tinder.scarlet:stream-adapter-rxjava2:0.1.12'
    implementation 'com.tinder.scarlet:message-adapter-protobuf:0.1.12'
    implementation 'com.tinder.scarlet:lifecycle-android:0.1.12'
    implementation 'com.tinder.scarlet:websocket-okhttp:0.1.12'


    implementation "com.squareup.moshi:moshi-kotlin:1.9.1"
    //implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'com.github.aabhasr1:OtpView:v1.1.2-ktx' // kotlin

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation "com.orhanobut:logger:2.2.0"
    implementation "com.github.GrenderG:Toasty:1.5.0"

    // Google Maps
    implementation "com.google.android.gms:play-services-maps:17.0.0"
    implementation "com.google.android.gms:play-services-location:18.0.0"
    implementation "com.google.android.gms:play-services-nearby:17.0.0"
    implementation "com.google.android.libraries.places:places:2.4.0"
    implementation "com.google.maps.android:android-maps-utils:2.0.3"
    implementation 'com.android.volley:volley:1.2.1'

    implementation 'com.googlecode.libphonenumber:libphonenumber:8.9.13'

    implementation platform('com.google.firebase:firebase-bom:28.4.1')
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.android.gms:play-services-auth-api-phone:17.5.0'

    implementation 'com.mikhaellopez:circularimageview:4.3.0'

    //STOMP
    implementation 'com.github.NaikSoftware:StompProtocolAndroid:1.6.6'

    //rxkotlin
    implementation "io.reactivex.rxjava2:rxkotlin:2.4.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"

    //image
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'io.github.ahmad-hamwi:tabsync:1.0.0'


    def room_version = "2.3.0"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    implementation 'androidx.paging:paging-runtime-ktx:3.1.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:29.0.0')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation('com.google.firebase:firebase-analytics-ktx'){
        exclude module: "play-services-ads-identifier"
        exclude module: "play-services-measurement"
        exclude module: "play-services-measurement-sdk"
    }
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'

    implementation 'com.google.android.play:core:1.10.2'
    implementation 'androidx.browser:browser:1.0.0'
}